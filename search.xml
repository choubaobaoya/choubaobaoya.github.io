<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础算法</title>
    <url>/2023/08/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
const int N = 1e6 + 10;
int n;
int q[N];
void quick_sort(int q[N], int l, int r) &#123;
    if (l == r)return;
    int x = q[(l + r) / 2], i = l - 1, j = r + 1;
    while (i &lt; j) &#123;
        do i++; while (q[i] &lt; x);
        do j--; while (q[i] &gt; x);
        if (i &lt; j) swap(q[i], q[j]);//swap交换
    &#125;
    quick_sort(q, l, j);
    quick_sort(q, j + 1, r);
&#125;
int main() &#123;
    cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i++)
        cin &gt;&gt; q[i];
    quick_sort(q, 0, n-1);
    for (int j = 0; j &lt; n; j++)
        cout &lt;&lt; q[j]&lt;&lt;endl;
    return 0;

&#125;
</code></pre>
<span id="more"></span>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
const int N = 1e6 + 10;
int n;
int q[N], tmp[N];

void merge_sort(int q[], int l, int r) &#123;
    if (l == r) return;
    int mid = l + r &gt;&gt; 1;
    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);
    int k = 0, i = l, j = mid + 1;
    while (i &lt;=mid &amp;&amp; j &lt;= r)  //别忘记带=
        if (q[i] &lt;= q[j])tmp[k++] = q[i++];
        else tmp[k++] = q[j++];
    while (i &lt;= mid)tmp[k++] = q[i++];
    while (j &lt;= r)tmp[k++] = q[j++];
    for (i = l, j = 0; i &lt;= r; j++, i++)q[i] = tmp[j];

&#125;



int main() &#123;
    cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i++)
        cin &gt;&gt; q[i];
    merge_sort(q, 0, n - 1);
    for (int j = 0; j &lt; n; j++)
        cout &lt;&lt; q[j];
    return 0;

&#125;
</code></pre>
<h2 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h2><pre><code class="c++">//数的范围
#include&lt;iostream&gt;
using namespace std;
const int N = 1e6 + 10;
int n,m;
int q[N];
int main() &#123;
    cin &gt;&gt; n &gt;&gt; m;
    for (int i = 0; i &lt; n; i++)cin &gt;&gt; q[i];
    while (m--) &#123;
        int x;
        cin &gt;&gt; x;
        int l = 0, r = n - 1;
        while (l &lt; r) &#123;
            int mid = l + r &gt;&gt; 1;
            if (q[mid] &gt;= x)r = mid;
            else l = mid + 1;
        &#125;
        if (q[l] != x)cout &lt;&lt; &quot;-1 -1&quot;;
        else &#123;
            cout &lt;&lt; l&lt;&lt; &quot; &quot;;
            int l = 0, r = n - 1;
            while (l &lt; r) &#123;
                int mid = l + r + 1 &gt;&gt; 1;//l=mid一定要写成mid=l+r+1/2一定要加一
                if (q[mid] &lt;= x)l = mid;//l=mid r就是mid-1;r=mid l就是mid+1;
                else r = mid - 1;
            &#125;
            cout &lt;&lt; l&lt;&lt;endl;
        &#125;

    &#125;
    return 0;
&#125;
</code></pre>
<h2 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h2><pre><code class="c++">//求平方根
#include&lt;iostream&gt;
using namespace std;
int main() &#123;
    double x;
    cin &gt;&gt; x;
    double l = 0, r = x;
    while (r - l &gt; 1e-6) &#123;
        double mid = ( l + r ) / 2;
        if (mid * mid &gt;= x)r = mid;
        else l = mid;
    &#125;
    cout &lt;&lt; l;
    return 0;
&#125;
</code></pre>
<h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><p><img src="/./hello-world.assets/image-20230708095834566.png" alt="image-20230708095834566"></p>
<pre><code class="c++">vector是动态数组
需要引入头文件#include&lt;vector&gt;
vector&lt;数据类型&gt;名称
vector&lt;int&gt;vec
这行代码的意思是定义一个vec的int类型的动态数组

    
    push_back(元素)    
    添加元素
    比如：vector&lt;int&gt;vec;
vec.push_back(1);目前是[1]
vec.push_back(2);目前是[1,2]
    
    pop_back()
    删除元素
    （）里不能写东西
    它是删除动态数组里最后一个元素
    
    /*数组名*/.size()
    访问动态数组的长度
    
    访问某个元素跟普通的数组访问一样
    
    vector&lt;/*数据类型*/&gt;().swap(/*名称/*);
    动态数组清空所有的数据且释放内存格式
    
    /*名称*/.empty()
    检查动态数组大小是否为零
    
</code></pre>
<p><img src="/./hello-world.assets/image-20230708104109654.png" alt="image-20230708104109654"></p>
<h2 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h2><pre><code class="c++">string A;
头文件include&lt;string&gt;
    
    构造函数
    const char * str=&quot;hello,world&quot;;

    string B(str);输出hello，world
    string C(B);同上
    string D(10,&quot;a&quot;);输出aaaaaaaaaa;

    拼接字符串
    string A=&quot;我&quot;;
    A+=&quot;爱玩&quot;;输出：我爱玩
        
    string B=&quot;i love&quot;;
    string C=&quot;game lol&quot;;
    B.append(C,0,4);只截取game，参数0是从哪个位置开始，参数4是截取的长度
        
    查找
    string A=&quot;abcde&quot;;
    int x=A.find(&quot;de&quot;);输出x=3,没有的情况输出-1；
    string A=&quot;abcdeabde&quot;;
    int x=A.rfind(&quot;de&quot;);输出7，是从右向左开始查找；
        
    替换
    string A=&quot;abcdefg&quot;;
    A.replace(1,3,&quot;11111111&quot;);从1好起3个字符替换成11111111
</code></pre>
<pre><code>NULL代表0
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
